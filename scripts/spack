# JULEA - Flexible storage framework
# Copyright (C) 2017-2019 Michael Kuhn
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

spack_clone ()
{
	local spack_commit

	spack_commit='b0abbfecb8595c8901855e679be0bbea64089fe8'

	test -n "${SPACK_DIR}" || return 1

	if test ! -d "${SPACK_DIR}"
	then
		git clone https://github.com/spack/spack.git "${SPACK_DIR}"
	fi

	test -d "${SPACK_DIR}" || return 1

	(
		cd "${SPACK_DIR}"

		git fetch
		git reset --hard "${spack_commit}"
	)

	return 0
}

spack_init ()
{
	local modules_dir
	local spack_env

	test -n "${SPACK_DIR}" || return 1
	test -d "${SPACK_DIR}" || return 1

	spack_env="${SPACK_DIR}/share/spack/setup-env.sh"

	test -f "${spack_env}" || return 1

	. "${spack_env}"

	return 0
}

spack_install ()
{
	local spack_pkg

	spack_pkg="$1"

	test -n "${SPACK_DIR}" || return 1
	test -d "${SPACK_DIR}" || return 1
	test -n "${spack_pkg}" || return 1

	(
		cd "${SPACK_DIR}"

		./bin/spack install "${spack_pkg}"
	)
}

spack_load ()
{
	local spack_pkg

	spack_pkg="$1"

	test -n "${spack_pkg}" || return 1

	spack load --dependencies "${spack_pkg}"

	# FIXME https://github.com/spack/spack/pull/12838
	if test "${spack_pkg}" = 'mariadb'
	then
		export PKG_CONFIG_PATH="$(spack location --install-dir mariadb)/share/pkgconfig:${PKG_CONFIG_PATH}"
	fi
}

spack_get_dependencies ()
{
	local dependencies
	local mode

	dependencies=''
	mode="$1"

	if test "${mode}" != 'load'
	then
		# FIXME only install if necessary? (command -v module > /dev/null 2>&1)
		# Required for Spack itself
		dependencies="${dependencies} environment-modules~X"
	fi

	if test "${mode}" = 'load' -o "${mode}" = 'install-full' -o "${mode}" = 'install-standard' -o "${mode}" = 'install-minimal'
	then
		# Required for Waf
		dependencies="${dependencies} pkgconfig"

		# Mandatory dependencies
		dependencies="${dependencies} glib"
		dependencies="${dependencies} libbson"
	fi

	if test "${mode}" = 'load' -o "${mode}" = 'install-full' -o "${mode}" = 'install-standard'
	then
		# Optional dependencies
		dependencies="${dependencies} lmdb"
		dependencies="${dependencies} sqlite"
		dependencies="${dependencies} mariadb"
		dependencies="${dependencies} lz4"
	fi

	if test "${mode}" = 'load' -o "${mode}" = 'install-full'
	then
		# Optional dependencies
		dependencies="${dependencies} leveldb"
		dependencies="${dependencies} libmongoc"
		dependencies="${dependencies} hdf5@develop~mpi"

		#dependencies="${dependencies} mpi"
		#dependencies="${dependencies} otf"
	fi

	printf '%s' "${dependencies}"
}

spack_load_dependencies ()
{
	local minimal_pkgs

	minimal_pkgs="$(spack_get_dependencies install-minimal)"

	if spack_init
	then
		for dependency in $(spack_get_dependencies load)
		do
			if test "${minimal_pkgs#*${dependency}}" != "${minimal_pkgs}"
			then
				spack_load "${dependency}"
			else
				if ! spack_load "${dependency}"
				then
					echo "Dependency ${dependency} cannot be loaded. If you have not installed it, you can ignore the error above." >&2
				fi
			fi
		done
	fi
}

spack_install_dependencies ()
{
	local mode

	mode="$1"

	test -n "${mode}" || return 1

	if spack_clone
	then
		for dependency in $(spack_get_dependencies "install-${mode}")
		do
			spack_install "${dependency}"
		done
	fi
}
